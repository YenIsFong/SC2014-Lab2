/* USER CODE BEGIN Header */
/**YEN FONG
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "ICM20948.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	ICM20948 imu;
	char sbuf2[20];//apitch,aroll,gpitch,groll
	char sbuf[3][6];//6 value
	char sbuf3[6];//pitch and roll
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  SystemClock_Config();
  /* USER CODE BEGIN 2 */
  uint8_t i;
  uint8_t status = IMU_Initialise(&imu,&hi2c1,&huart3);
  float aroll,apitch,groll,gpitch;
  float roll,pitch;

  uint32_t miliNew;
  uint32_t miliOld=HAL_GetTick();
  uint32_t dt=0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)/////////////////////////////////////////////////////////////////YEN FONG//////////////////////////////////////////////////
  {
	//  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
//	  HAL_Delay(100);//LED3 blink
    /* USER CODE END WHILE */
	  HAL_StatusTypeDef accelstatus = IMU_AccelRead(&imu);
	  	  HAL_StatusTypeDef gyrostatus = IMU_GyroRead(&imu);
	  	  miliNew = HAL_GetTick();
	  	  dt=miliNew-miliOld;
	  	  miliOld= miliNew;

//	  	  for ( i= 0; i < 3; i++)
//	  	  {
//	  		  sprintf(sbuf[i],"%5.2f ",imu.acc[i]);
//	  		  HAL_UART_Transmit(&huart3, sbuf[i], 6, HAL_MAX_DELAY);
//	  		  sprintf(sbuf[i],"%5.2f ",imu.gyro[i]);
//	  		  HAL_UART_Transmit(&huart3, sbuf[i], 6, HAL_MAX_DELAY);
//	  	  }//ax,gx,ay,gy,az,gz //raw data //a measures acceleration m/s^2 //g measures rad/s rate of rotation//angular velocity
      //
    // atan(y/x) held back some information and can only assume that the input came from quadrants I (0 to 90deg)or IV (0 to -90).
    // In contrast, atan2(y,x) gets all the data and thus can resolve the correct angle.
		  aroll = (atan2(imu.acc[1],imu.acc[2]))*180/3.14;//atan2(y,z) returns teta which is -pi to pi // atan returns -pi/2 to pi/2
		  sprintf(sbuf2,"%5.2f ",aroll);
		  HAL_UART_Transmit(&huart3, sbuf2, 6, HAL_MAX_DELAY);
                                                                                //atan2(y,x);mathlab notation
		  apitch = atan2(imu.acc[0],imu.acc[2])*180/3.14;//atan2(x,z) returns rad//convert from rad to deg//
		  sprintf(sbuf2,"%5.2f ",apitch*-1);//invert a[x]; because when it is pitching up, reading is negative
		  HAL_UART_Transmit(&huart3, sbuf2, 6, HAL_MAX_DELAY);

		  groll=(groll+imu.gyro[0]*dt*0.001);//integration //estimated angle rotated//convert ms to s
		  sprintf(sbuf2,"%5.2f ",groll);
		  HAL_UART_Transmit(&huart3, sbuf2, 6, HAL_MAX_DELAY);

		  gpitch=(gpitch+imu.gyro[1]*dt*0.001);//integration//estimated angle rotated dteta/dt*dt=dteta//change in angle
		  sprintf(sbuf2,"%5.2f ",gpitch);// convert float to char
		  HAL_UART_Transmit(&huart3, sbuf2, 6, HAL_MAX_DELAY);



		  roll= (0.1)*aroll + 0.9*(roll+imu.gyro[0]*dt*0.001);//complimentary roll //a is 0.1 ratio// acc prone to minor disturbance//a is for gyro since it has large but short term effect
		  sprintf(sbuf3,"%5.2f ", roll);
		  HAL_UART_Transmit(&huart3, sbuf3, 6, HAL_MAX_DELAY);
      //LPF
		  pitch= (0.1)*apitch + 0.9*(pitch+imu.gyro[1]*dt*0.001);//complimentary pitch//dt is in ms so /1000 to get seconds
		  sprintf(sbuf3,"%5.2f ", pitch);
		  HAL_UART_Transmit(&huart3, sbuf3, 6, HAL_MAX_DELAY);
      //LPF
		  sprintf(sbuf2,"\r\n");//skip next line
		  HAL_UART_Transmit(&huart3, sbuf2, 2, HAL_MAX_DELAY);
		  HAL_Delay(10);


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
